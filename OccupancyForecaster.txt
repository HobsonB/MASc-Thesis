// OccupancyForecaster

// Brodie W. Hobson

// Takes building electrical loads and uses them to forecast occupancy for the next 24 hours

Variable elecLoad[24] // Total plug and lighting loads in the building every hour for 24 hour day
Variable i As Integer
Variable handle // temporary variable to overcome character limits of single line within program
Variable initialize // Fills real cluster vector with dummy data to start occupancy forecaster for the first week after implementation

// Fill real cluster data with conservative dummy data to start forecast

If initialize = 0 Then
realCluster[1] = 1
realCluster[2] = 1
realCluster[3] = 1
realCluster[4] = 1
realCluster[5] = 1
realCluster[6] = 4
realCluster[7] = 4
predCluster = 1
initialize = 1
End If

// Record plug-in equipment and lighting load at hourly intervals

DoEvery 60M
handle = 0
handle = (420100.CS_TX6AA1_Instantaneous_Real_Power_3_Phase_Total + 420100.CS_TX6AA3_Total_Instantaneous_Real_Power_3_Phase_Total)
handle = (handle + (420100.CS_TX6AA4_Total_Instantaneous_Real_Power_3_Phase_Total + 422200.CS_TX6AA5_Total_Instantaneous_Real_Power_3_Phase_Total))
handle = (handle + (422200.CD_TX6AA6_Total_Instantaneous_Real_Power_3_Phase_Total + 422200.CS_TX6AA7_Total_Instantaneous_Real_Power_3_Phase_Total))
handle = (handle + (420100.CS_LP6AA1_Instantaneous_Real_Power_3_Phase_Total + 420100.CS_LP6AA2_Instantaneous_Real_Power_3_Phase_Total))
handle = (handle + (420100.CS_LP6AA3_Total_Instantaneous_Real_Power_3_Phase_Total + 420100.CS_LP6AA4_Total_Instantaneous_Real_Power_3_Phase_Total))
handle = (handle + (422200.CS_LP6AA5_Total_Instantaneous_Real_Power_3_Phase_Total + 422200.CS_LP6AA6_Total_Instantaneous_Real_Power_3_Phase_Total))
handle = (handle + (422200.CS_LP6AA7_Total_Instantaneous_Real_Power_3_Phase_Total))
i = Hours + 1
elecLoad[i] = handle
End Do

Variable elecProfile[4, 3] // A matrix containing the electrical load cluster profiles for comparison

// Fill matrix with electrical load profiles (trained offline)

elecProfile[1, 1] = 40 // Electrical load for high occupancy profile at 1pm
elecProfile[1, 2] = 41 // Electrical load for high occupancy profile at 5pm
elecProfile[1, 3] = 37 // Electrical load for high occupancy profile at 7pm
elecProfile[2, 1] = 36 // Electrical load for medium occupancy profile at 1pm
elecProfile[2, 2] = 36 // Electrical load for high occupancy profile at 5pm
elecProfile[2, 3] = 28 // Electrical load for medium occupancy profile at 7pm
elecProfile[3, 1] = 37 // Electrical load for low occupancy profile at 1pm
elecProfile[3, 2] = 35 // Electrical load for high occupancy profile at 5pm
elecProfile[3, 3] = 32 // Electrical load for low occupancy profile at 7pm
elecProfile[4, 1] = 31 // Electrical load for very low occupancy profile at 1pm
elecProfile[4, 2] = 33 // Electrical load for high occupancy profile at 5pm
elecProfile[4, 3] = 26 // Electrical load for very low occupancy profile at 7pm

Variable diffMatrix[4, 3] // Dissimilarity matrix to calculate the SSE and find the cluster which the past day actually belongs to
Variable SSE[4] // Stores the SSE for each cluster
Variable realCluster[7] // Store which cluster the day actually belonged to (1 = high, 2 = medium, 3 = low, 4 = very low) with data from the previous 6 days
Variable realClusterToday // Store what cluster the day actually belonged to (1 = high, 2 = medium, 3 = low, 4 = very low)

// Compute the SSE between measured electrical load and profiles

If Hours > 22 Then
  DoEvery 30M
  For i = 1 To 4
  diffMatrix[i, 1] = ((elecProfile[i, 1] - elecLoad[13]) ^ 2)
  diffMatrix[i, 2] = ((elecProfile[i, 2] - elecLoad[17]) ^ 2)
  diffMatrix[i, 3] = ((elecProfile[i, 2] - elecLoad[19]) ^ 2)
  SSE[i] = (diffMatrix[i, 1]+diffMatrix[i, 2]+diffMatrix[i, 3])
  End For 

  // Isolate which SSE is smallest (which cluster to use)

  If (Min (SSE[1], SSE[2], SSE[3], SSE[4])) = SSE[1] Then
    realCluster[Weekday] = 1
  ElseIf  (Min (SSE[1], SSE[2], SSE[3], SSE[4])) = SSE[2] Then
    realCluster[Weekday] = 2
  ElseIf  (Min (SSE[1], SSE[2], SSE[3], SSE[4])) = SSE[3] Then
    realCluster[Weekday] = 3
  ElseIf  (Min (SSE[1], SSE[2], SSE[3], SSE[4])) = SSE[4] Then
    realCluster[Weekday] = 4
  End If
    realClusterToday = realCluster[Weekday]

    Variable predCluster As Integer // The predicted cluster for the next day

      // Rules for occupancy forecast from decision tree (trained offline)

      If (realCluster[((Weekday Mod 7) + 1)] = 4) Then
      predCluster = 4
      ElseIf  (realCluster[((Weekday Mod 7) + 1)] = 2) Then
      predCluster = 2
      ElseIf  (realCluster[((Weekday Mod 7) + 1)] = 1) Then
      predCluster = 1
      ElseIf  (realCluster[Weekday] = 3) Then
      predCluster = 3
      ElseIf  (realCluster[(((Weekday - 4) Mod 7) + 1)] = 4) Then
      predCluster = 3
      Else

      // If none of these criteria are satisfied, assume high occupancy

      predCluster = 1
      End If
  End Do
End If

Variable oaProfile[4, 5] // Matrix containing multiplier values for the OA damper based on occupancy forecast
Variable oaPos // Outdoor air damper position (temporary variable)

// Fill matrix with damper profiles (trained offline)

oaProfile[1, 1] = 0.43
oaProfile[1, 2] = 0.6
oaProfile[1, 3] = 0.83
oaProfile[1, 4] = 0.83
oaProfile[1, 5] = 0.63
oaProfile[2, 1] = 0.43
oaProfile[2, 2] = 0.5
oaProfile[2, 3] = 0.63
oaProfile[2, 4] = 0.6
oaProfile[2, 5] = 0.57
oaProfile[3, 1] = 0.43
oaProfile[3, 2] = 0.5
oaProfile[3, 3] = 0.57
oaProfile[3, 4] = 0.57
oaProfile[3, 5] = 0.5
oaProfile[4, 1] = 0.43
oaProfile[4, 2] = 0.47
oaProfile[4, 3] = 0.47
oaProfile[4, 4] = 0.5
oaProfile[4, 5] = 0.5

// Read appropriate damper values into the damper position variable at the appropriate time intervals

If Hours < 8 Then
oaPos = oaProfile[(predCluster), 1]
ElseIf  Hours < 11 Then
oaPos = oaProfile[(predCluster), 2]
ElseIf  Hours < 15 Then
oaPos = oaProfile[(predCluster), 3]
ElseIf  Hours < 18 Then
oaPos = oaProfile[(predCluster), 4]
ElseIf  Hours < 21 Then
oaPos = oaProfile[(predCluster), 5]
End If

// Update damper positions in AHU1 and AHU2 damper control programs hourly, based on the above damper positions

DoEvery 60M
421500.EAD_FAD_MIN_POS = (Ceiling (oaPos * 40))
AHU2_EAD_FAD_MIN_POS = (Ceiling (oaPos * 30))
End Do
